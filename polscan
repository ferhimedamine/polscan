#!/bin/bash

# Polscan: a Debian policy scanner

# Copyright (C) 2015-2017  Lars Windolf <lars.windolf@gmx.de>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

BASE=$(dirname "$0")
BASE=$(readlink -e "$BASE")
if [ "$BASE" == "/usr/bin" ]; then
	CONF_DIR=/etc/polscan/
	LIB_DIR=/usr/lib/polscan/
else
	CONF_DIR="${BASE}/etc/"
	LIB_DIR="${BASE}/lib"
fi

NON_INTERACTIVE=$(/usr/bin/tty -s; echo $?)

# Command line parsing, setup environment
source "$LIB_DIR/polscan-common.inc"

# 0. Prepare output dir
if [ ! -d "$RESULT_DIR" ]; then
	mkdir -vp "$RESULT_DIR" || exit 1
fi

# 1. If none given determine host list automatically
if [ "$HOST_LIST" == "" ]; then 
	export RESULT_BASE_DIR ONE_DAY_AGO  # Some host list providers might want to use it
        for h in $HOST_LIST_PROVIDER; do
                echo "Fetching host list (provider '$h')..."
                HLP="$LIB_DIR/host-list-providers/$h"
                if [ ! -f "$HLP" ]; then
                        echo "ERROR: Could not find host list provider $HLP"
                        exit 1
                fi
                HOST_LIST="${HOST_LIST}
$($HLP)"
                if [ $? -ne 0 ]; then
                        echo "ERROR: Could not determine '$h' host list!"
                        exit 1
                fi
        done
fi

if [ "$HOST_LIST" == "" ]; then
	echo "ERROR: Could not find any hosts! Aborting."
	exit 1
else
	echo "Host list:" $HOST_LIST
fi

if [ "$TEST" == "" -o "$TEST" == "all" ]; then
	REMOTE_SCANNER_LIST=$(get_scanners remote)
else
	REMOTE_SCANNER_LIST=$TEST
fi
if [ "$REMOTE_SCANNER_LIST" != "" ]; then

	# 2. Build remote scanner script
	RSS=/tmp/polscan-remote-scanner.$$
	cat "$LIB_DIR/scanner-header.inc" >$RSS || exit 1
	cat "$LIB_DIR/scanner-functions.inc" >>$RSS || exit 1
	for scanner in $REMOTE_SCANNER_LIST; do
		file=$LIB_DIR/scanners/$scanner
		if [ ! -f "$file" ]; then
			echo "WARNING: Unknown policy '$scanner'!"
		else
			group=$(get_policy_info "$file" group)
			name=$(get_policy_info "$file" name)
			echo "policy_name='$name'; policy_group='$group'" >>$RSS
			cat "$file" >>$RSS
		fi
	done
	# Add marker result for completed scan
	printf "policy_name='Polscan remote scan' policy_group=Polscan result_ok\n" >>$RSS

	echo "Running remote scans..."

	remotes=${HOST_LIST}
	if [ "$SUDO_CMD" != "" ]; then
		# Suffix host names with sudo command
		remotes=$(echo $remotes | xargs -n 1 | sed "s/\$/ ${SUDO_CMD}/")
	fi
	
        if [ "$TEST" == "" ]; then
		out="${RESULT_DIR}/\${host/ */}"
		err="${RESULT_DIR}/\${host/ */}.err"
	else
		out="&1"
		err="&2"
	fi

	echo "$remotes" | xargs -n1 --replace={} -n 1 -P ${SCAN_CONCURRENCY-15} \
	/bin/bash -c "host='{}';printf '%s\n' \"\${host/ */}\" && \
	              $SSH_CMD {} \"/bin/bash < <(/bin/cat -)\" <${RSS} >$out 2>$err || printf 'SSH to host failed!\n' >$err"

	# Post process all errors logged and mark incomplete scans
	for host in $HOST_LIST; do
		if [ -f ${RESULT_DIR}/${host}.err ]; then
			# Scanner should never set return code, if we get one
			# we have a scripting/connectivity issue that we want
			# to track under name "polscan"
			(
				errors=$(grep -v "$REMOTE_STDERR_WHITELIST" "${RESULT_DIR}/${host}.err" 2>/dev/null | sort -u)
				printf "%s\n" "$errors" | grep -v '^$' | sed "s/^/Polscan FAILED |||Polscan remote scan||| /"
			) >>"${RESULT_DIR}/$host"
			rm "${RESULT_DIR}/${host}.err"
			if ! grep -q 'OK |||Polscan remote scan|||' "${RESULT_DIR}/${host}"; then
				printf "Polscan FAILED |||Polscan remote scan||| Scan was not completed successfully!\n" >>"${RESULT_DIR}/$host"
			fi
		fi
	done
fi
rm $RSS

[ "$TEST" != "" ] && exit 0

# 4. Run standalone scanner scripts
STANDALONE_SCANNER_LIST=$(get_scanners standalone)
if [ "$STANDALONE_SCANNER_LIST" != "" ]; then
	echo "Running standalone scanners..."
	for scanner in $STANDALONE_SCANNER_LIST; do
		echo " -> Running '$scanner'..."
		scanner_file=$LIB_DIR/standalone/$scanner
		group=$(get_policy_info "$scanner_file" group)
		policy=$(get_policy_info "$scanner_file" name)
		$scanner_file |\
		while read host severity data; do
			echo "$group $severity |||$policy||| $data" >>"$RESULT_DIR/$host"
		done
	done
fi

$BASE/polscan_html

echo "Done."
